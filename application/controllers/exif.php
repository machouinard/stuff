<?phpdefined('BASEPATH') OR exit('No direct script access allowed');class Exif extends CI_Controller {    var $extension;    var $web_image = '';    var $reg_thumb;    function __construct(){        parent::__construct();    }	function index(){//$data array feeds a page template that in turn loads the view- if that makes sense.        $sample = anchor_popup('exif/test_images', 'Sample images for demonstration<br />(with GPS data)');                //$sample2 = anchor_popup('http://www.photozo.com/album/', '...More images to see');        $data = array(            'title'      => 'Mark\'s EXIF Viewer',            'content'    => 'exif/exif_view',            'page_title' => "What's in an Image?<br /><span class='mini_text'>An Online EXIF Viewer</span>",            'msg'        => "<span class='subtitle'><img src='/images/graphics/pcjrFW1.png' alt='&nbsp;&nbsp;&nbsp;Image Metadata'></span>",            'seo_h1'     => "Mark's Online Exif Viewer",            'logo'       => '/images/graphics/rolleiFW5.png',            );        $this->load->view('page_guest', $data);    }    function upload(){            //print_array($_FILES, 'files', 1);        if($_FILES['userfile']['error'] !== 4){            $_POST['shit'] = 'okay';        }            //print_array($_POST, 'post', 1);        $this->load->library('form_validation');        $this->form_validation->set_rules('shit', 'Select an Image', 'required');        if ($this->form_validation->run() == FALSE){            $data = array(                'title'      => 'Errors',                'content'    => 'exif/exif_view',                'msg'        => validation_errors(),                'error'      => 1,                'page_title' => '<-Please fix this'                );            $this->load->view('page_guest', $data);        }else{            $year  = date("Y", now());            $month = date("m", now());            $day   = date("d", now());            $upload_path = 'images/exif_view/';            $dir_struct  = array(                'dir' => $upload_path,                );            build_dir_structure($dir_struct);            $config['upload_path']   = $upload_path;            $config['allowed_types'] = 'gif|jpg|jpeg|png|tiff|CR2';            $config['max_size']      = '5000';            $config['max_width']     = '4000';            $config['max_height']    = '4000';            $config['overwrite']     = TRUE;            $this->load->library('upload', $config);            if ( !$this->upload->do_upload()){                $error = array(                    'error' => $this->upload->display_errors(),                    );                $data = array(                  'title'      => 'Error',                  'content'    => 'result',                  'page_title' => 'Error',                  'msg'        => 'There was trouble with the upload',                  'error'      => 1,                  'data'       => array(                    'display' => 1,                    'error'   => $error,                    ),                  );                $this->load->view('page_guest', $data);            }            else            {                $upload_data     =  $this->upload->data();                $path_parts      = pathinfo($upload_data['full_path']);                $this->extension = strtolower($path_parts['extension']);                $new_name        = getTimestamp();                $file_name       = $new_name.'.'. $this->extension;                $image     = $upload_path.$file_name;                $old_image = $upload_data['full_path'];                rename($old_image, $image);                $this->map_image($file_name, $image);            }        }    }    function map_image($file_name, $image){        $this->load->model('image_model');        $exif_exif_tool   = "<h2>ExifTool</h2>";        $exif_exif_tool   .= get_my_exif($image, 'exiftool');        $exif_exif        = "<h2>EXIF</h2>";        $exif_exif        .= get_my_exif($image, 'exif');        $exif_xmp         = "<h2>XMP</h2>";        $exif_xmp         .= get_my_exif($image, 'xmp');        $exif_photoshop   = "<h2>Photoshop</h2>";        $exif_photoshop   .= get_my_exif($image, 'photoshop');        $exif_iptc        = "<h2>IPTC</h2>";        $exif_iptc        .= get_my_exif($image, 'iptc');        $exif_jfif        = "<h2>JFIF</h2>";        $exif_jfif        .= get_my_exif($image, 'jfif');        $exif_file        = "<h2>File</h2>";        $exif_file        .= `exiftool  -h -a -file:all --directory --filename --filepermissions --filemodifydate $image`;// excluding some info.  Nobody needs info about the server        $exif_composite   = "<h2>Composite</h2>";        $exif_composite   .= get_my_exif($image, 'composite');        $exif_icc_profile = "<h2>ICC Profile</h2>";        $exif_icc_profile .= get_my_exif($image, 'icc_profile');        $exif_maker_notes = "<h2>Maker Notes</h2>";        $exif_maker_notes .= get_my_exif($image, 'makernotes');        $short_exif       = "<span id='click_histo' style='color: darkgray;'>Click Here For Histogram</span>";        $short_exif       .= $this->__short_exif($image);                 ////////////////        $dir  = 'images/exif_view/';        $data = array(            'dir' => $dir,            );        build_dir_structure($data);        $histo      = $dir.'histo_'.$file_name;        $exif_thumb = $dir.'xThumb_'.$file_name;        if(!exif_thumb($image, $exif_thumb)){            $exif_thumb = FALSE;        }                //$this->image_moo->load($image)->resize_crop(128, 100)->save($h_thumb);        `/usr/bin/convert $image \        -define histogram:unique-colors=false \        -write histogram:mpr:hgram  +delete \        mpr:hgram  -strip  -resize 150%  $histo`;                ////////////////        $this->load->library('googlemaps');/////////EXIF IS FULL BEFORE readGPSinfoEXIF        if($gps = $this->readGPSinfoEXIF($image)){            $lat = $gps[0];            $lon = $gps[1];            $location = $lat.', '.$lon;            $reverse_geo_loc = $lat.','.$lon;            $config = array(                'center'              => $location,                'zoom'                => 14,                'map_type'            => 'HYBRID',                'map_types_available' => array("HYBRID", "SATELLITE", "TERRAIN", "STREET"),                'map_width'           => '100%',                'geocodeCaching'      => TRUE,                'bicyclingOverlay'    => TRUE,                'libraries'           => 'geometry',                'custom_listener'     => "google.maps.event.addListener(map, 'click', function(event) {                    var myClick = event.latLng;                    measureDistance(myClick);                });",            );            $this->googlemaps->initialize($config);                        // $human_location = $this->__latlon_to_human($reverse_geo_loc);            $human_location = $this->__convert_latlon( $reverse_geo_loc );            $marker = array(                'infowindow_content' => $human_location,                'icon'               => 'http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=H|9999FF|000000',                'position'           => $location,                );            $this->googlemaps->add_marker($marker);                        //$gdata['map'] = $this->googlemaps->create_map();            $map = $this->googlemaps->create_map();                        //$this->reg_thumb = $dir.'thumb_'.$file_name;            $thumb = $this->__make_thumb($file_name, $image);                        /////////////////DB STUFF            $db_info = array(              'image_url'         => base_url().$image,              'image_loc'         => $image,              'thumb_url'         => base_url().$thumb,              'thumb_loc'         => $thumb,              'latlon'            => $reverse_geo_loc,              'formatted_address' => $human_location,              'ip'                => $this->input->ip_address(),              );            $this->image_model->insert_db($db_info);                        /////////////////END DB STUFF            $data = array(                'title'      => 'Mark\'s EXIF Viewer',                'content'    => 'exif/exif_map_view',                'page_title' => $human_location,                                //'msg'      => "According to the data stored in this image:<br /><a href='".  base_url().$image."' target='_blank'><img src='".  base_url().$thumb."' ></a>",                'msg'        => "&nbsp;<br />&nbsp;<br /><a href='".  base_url().$image."' rel='lightbox' title='$human_location'><img src='".  base_url().$thumb."' ></a>",                'histo'      => "&nbsp;<br />&nbsp;<img src='".base_url().$histo."' >",                                //'map'      => $gdata['map'],                'map'        => $map,                'short_exif' => $short_exif,                'script'     => 'slimbox2.js',                'css'        => 'slimbox2.css',                'data'       => array(                    'exif_exif'        => $exif_exif,                    'exif_xmp'         => $exif_xmp,                    'exif_photoshop'   => $exif_photoshop,                    'exif_iptc'        => $exif_iptc,                    'exif_jfif'        => $exif_jfif,                    'exif_file'        => $exif_file,                    'exif_composite'   => $exif_composite,                    'exif_maker_notes' => $exif_maker_notes,                    'exif_icc_profile' => $exif_icc_profile,                    'image'            => $image,                    'exif_thumb'       => $exif_thumb,                    'exif_exif_tool'   => $exif_exif_tool,                    ),                );$this->load->view('page_guest', $data);}else{    $this->__fix_rotation($image);                   // print_array($exif, 'line 170 map.php',1);    $thumb = $this->__make_thumb($file_name, $image);                        /////////////////DB STUFF    $db_info = array(      'image_url' => base_url().$image,      'image_loc' => $image,      'thumb_url' => base_url().$thumb,      'thumb_loc' => $thumb,      'ip' => $this->input->ip_address(),      );    $this->image_model->insert_db($db_info);                        /////////////////END DB STUFF    $data = array(        'title'      => 'Mark\'s EXIF Viewer',        'content'    => 'exif/exif_view',        'page_title' => 'No Location Data Found',        'msg'        => 'Nothing there',        'msg'        => "&nbsp;<br />&nbsp;<br /><a href='".  base_url().$image."' rel='lightbox' ><img src='http://stuff.chouinard.me/{$thumb}' title='Display in new window' ></a>",        'histo'      => "&nbsp;<br />&nbsp;<img src='".base_url().$histo."' >",        'short_exif' => $short_exif,        'script'     => 'slimbox2.js',        'css'        => 'slimbox2.css',        'data'       => array(         'thumb'            => $thumb,         'exif_exif'        => $exif_exif,         'exif_xmp'         => $exif_xmp,         'exif_photoshop'   => $exif_photoshop,         'exif_iptc'        => $exif_iptc,         'exif_jfif'        => $exif_jfif,         'exif_file'        => $exif_file,         'exif_composite'   => $exif_composite,         'exif_maker_notes' => $exif_maker_notes,         'exif_icc_profile' => $exif_icc_profile,         'exif_thumb'       => $exif_thumb,         'exif_exif_tool'   => $exif_exif_tool,         'error'            => 1,         ),        );$this->load->view('page_guest', $data);}}function readGPSinfoEXIF($image){                //if($this->ext == 'jpg' || $this->ext == '.jpg'){    if(strpos($this->extension, 'jpg') !== FALSE){        if($exif = @exif_read_data($image, 0, true)){                            //print_array($exif, 'exif', 1);            if(isset($exif['GPS'])){                if(@$exif['GPS']['GPSLatitude'] == '') {                    return false;                } else {                    $lat_ref         = $exif['GPS']['GPSLatitudeRef'];                    $lat             = $exif['GPS']['GPSLatitude'];                    list($num, $dec) = explode('/', $lat[0]);                    $lat_s           = $num / $dec;                    list($num, $dec) = explode('/', $lat[1]);                    $lat_m           = $num / $dec;                    list($num, $dec) = explode('/', $lat[2]);                    $lat_v           = $num / $dec;                    $lon_ref         = $exif['GPS']['GPSLongitudeRef'];                    $lon             = $exif['GPS']['GPSLongitude'];                    list($num, $dec) = explode('/', $lon[0]);                    $lon_s           = $num / $dec;                    list($num, $dec) = explode('/', $lon[1]);                    $lon_m           = $num / $dec;                    list($num, $dec) = explode('/', $lon[2]);                    $lon_v           = $num / $dec;                    $lat_int         = ($lat_s + $lat_m / 60.0 + $lat_v / 3600.0);                                    // check orientaiton of latitude and prefix with (-) if S                    $lat_int         = ($lat_ref == "S") ? '-' . $lat_int : $lat_int;                    $lon_int         = ($lon_s + $lon_m / 60.0 + $lon_v / 3600.0);                                    // check orientation of longitude and prefix with (-) if W                    $lon_int         = ($lon_ref == "W") ? '-' . $lon_int : $lon_int;                    $gps_int         = array($lat_int, $lon_int);                    $this->__fix_rotation($image);                    return $gps_int;                }            }        }    }else{        return false;    }}public function web_image(){    $this->load->library('form_validation');    $this->form_validation->set_rules('url', 'Image URL', 'required');    if ($this->form_validation->run() == FALSE)    {        $data = array(            'title'      => 'Errors',            'content'    => 'exif/exif_view',            'page_title' => '<-Please fix this',            'msg'        => validation_errors(),            'error'      => '1',            );        $this->load->view('page_guest', $data);    }else{        $url        = $this->input->post('url');        $path_parts = pathinfo($url);        if(isset($path_parts['extension'])){            $this->extension = strtolower($path_parts['extension']);        }        $file_types = "3FR, 3G2, 3GP, 3GP2, 3GPP, ACFM, ACR, AFM, AI, AIF, AIFC, AIFF, AIT, AMFM, APE, ARW, ASF, AVI, BMP, BTF, CHM, CIFF, COS, CR2, CRW, CS1, DC3, DCM, DCP, DCR, DFONT, DIB, DIC, DICM, DIVX, DJV, DJVU, DLL, DNG, DOC, DOCM, DOCX, DOT, DOTM, DOTX, DV, DVB, DYLIB, EIP, EPS, EPS2, EPS3, EPSF, ERF, EXE, EXIF, F4A, F4B, F4P, F4V, FLA, FLAC, FLV, FPX, GIF, GZ, GZIP, HDP, HTM, HTML, ICC, ICM, IDML, IIQ, IND, INDD, INDT, ITC, J2C, J2K, JNG, JP2, JPC, JPEG, JPF, JPG, JPM, JPX, K25, KDC, KEY, KTH, LNK, M2T, M2TS, M2V, M4A, M4B, M4P, M4V, MEF, MIE, MIF, MIFF, MKA, MKS, MKV, MNG, MOS, MOV, MP3, MP4, MPC, MPEG, MPG, MPO, MQV, MRW, MTS, MXF, NEF, NEWER, NMBTEMPLATE, NRW, NUMBERS, ODB, ODC, ODF, ODG, ODI, ODP, ODS, ODT, OGG, OGV, ORF, OTF, PAGES, PBM, PCT, PDF, PEF, PFA, PFB, PFM, PGF, PGM, PICT, PMP, PNG, POT, POTM, POTX, PPM, PPS, PPSM, PPSX, PPT, PPTM, PPTX, PS, PS2, PS3, PSB, PSD, PSP, PSPFRAME, PSPIMAGE, PSPSHAPE, PSPTUBE, QIF, QT, QTI, QTIF, RA, RAF, RAM, RAR, RAW, RIF, RIFF, RM, RMVB, RPM, RSRC, RTF, RV, RW2, RWL, RWZ, SO, SR2, SRF, SRW, SVG, SWF, THM, THMX, TIF, TIFF, TS, TTC, TTF, TUB, VOB, VRD, VSD, WAV, WDP, WEBM, WEBP, WMA, WMV, X3F, XCF, XHTML, XLA, XLAM, XLS, XLSB, XLSM, XLSX, XLT, XLTM, XLTX, XMP, ZIP";        $f_types = strtolower($file_types);        $types = explode(', ', $f_types);        if(in_array($this->extension, $types)){            $new_name    = getTimestamp();            $file_name   = $new_name.'.'. $this->extension;            $upload_path = 'images/exif_view/';            $dir_struct  = array(                'dir' => $upload_path,                );            build_dir_structure($dir_struct);            $image = $upload_path.$file_name;            $ch    = curl_init($url);            $fp    = fopen($image, 'wb');            curl_setopt($ch, CURLOPT_FILE, $fp);            curl_setopt($ch, CURLOPT_HEADER, 0);            curl_exec($ch);            curl_close($ch);            fclose($fp);            $this->web_image = "<span class='mini_text'><a href='$url' target='_blank'>$url</a><span>";            $this->map_image($file_name, $image);        }else{            $data = array(                'title'        => 'No Image Found',                'content'      => 'exif/exif_view',                'msg'          => 'There was no image found at '.$url,                'page_title'   => 'No Image Found',                'page_heading' => 'Please make sure the URL you enter points to an image',                //'more'       => 'exif/exif_view',                'error'        => 1,                );            $this->load->view('page_guest', $data);        }    }}private function __get_exif($image){    $exif = `exiftool -j $image`;    $exif = json_decode($exif, TRUE);    return $exif;}private function __make_thumb($file_name, $image){    $dir  = 'images/exif_view/thumbs/';    $data = array(        'dir' => $dir,        );    build_dir_structure($data);    $thumb = $dir.'thmb_'.$file_name;                $this->image_moo->load($image)->resize(400, 400)->save($thumb, TRUE); //160, 160                return $thumb;            }            private function __fix_rotation($image){// 		echo 'file location from fix_rotation function line 180: '.$image;              $this->image_moo->load($image);              if($this->image_moo->errors){               print $this->image_moo->display_errors();           }           if(strpos($this->extension, 'jpg') !== FALSE){            $exif = @exif_read_data($image);                //print_array($exif, 'line 294 map.php');        }else{            $exif = NULL;        }// 		print_array($exif, 'EXIF read from $image - same image location being fed to image_moo');//(Custom print_r function) - reads EXIF as expected        if(isset($exif['Orientation'])){          $orient = $exif['Orientation'];          switch($orient)          {			case 1: // none            break;			case 3: // 180 rotate            $this->image_moo->rotate(180);            break;			case 6: // 90 rotate right            $this->image_moo->rotate(270);            break;			case 8:    // 90 rotate left            $this->image_moo->rotate(90);            break;        }    }    read_exif($image, 'images/exif/stored/image.mie');    $this->image_moo->save($image, TRUE);    $this->image_moo->clear();    write_exif($image, 'images/exif/stored/image.mie');    if(is_file('images/exif/stored/image.mit')){        unlink('images/exif/stored/image.mie');    }                //print_array($exif, 'line 329 map.php', 1);//                $m = exif_read_data($image, 0, TRUE);//                print_array($m, 'line 343 map.php',1);}private function __convert_latlon( $location ) {    $url     = "http://maps.googleapis.com/maps/api/geocode/json?latlng=$location&sensor=false";    $json    = file_get_contents( $url );    $data    = json_decode( $json );    if( $data->status == 'OK' && !empty( $data->results[0] ) ) {            return $data->results[0]->formatted_address;    } else {        return $location;    }}private function __latlon_to_human($location){    $api_key  = "AIzaSyBzcpy3cp1iGCTWnjgY3O0oRHcwrUccDGA";        // format this string with the appropriate latitude longitude    $url      = 'http://maps.google.com/maps/geo?q='.$location.'&output=json&sensor=false&key=' . $api_key;        // make the HTTP request    $data     = @file_get_contents($url);        // parse the json response    $jsondata = json_decode($data,true);		// print_array($jsondata, '$jsondata', 1);		//if we get a placemark array and the status was good, get the city/state    if(is_array($jsondata )&& $jsondata ['Status']['code']==200)    {       if(isset($jsondata['Placemark'][0]['AddressDetails']['Country']['AdministrativeArea']['Locality'])){        $city = $jsondata['Placemark'][0]['AddressDetails']['Country']['AdministrativeArea']['Locality']['LocalityName'].', ';    }else{        $city = '';    }    @$state = $jsondata['Placemark'][0]['AddressDetails']['Country']['AdministrativeArea']['AdministrativeAreaName'];    $full_loc = $city.$state;    return $full_loc;}else{   return $location;}}function test_images(){    $this->load->library('table');    $data = array(        'title'        => 'Geotagged Images',        'content'      => 'test_images',        'msg'          => 'Right click an image, click <i style = "color: slategray;">Copy Image Location</i> or <i style = "color: slategray;">Copy Image URL</i> etc..., then paste into the <i style = "color: slategray;">Enter a URL</i> box on the EXIF page',        'page_title'   => '$images->test();',        'page_heading' => 'Sample Geotagged Images<br />(except Hank at Disney)<hr>',        );    $this->load->view('page_guest', $data);}private function __short_exif($image){  $size    = format_bytes(filesize($image));          // $exif = get_exif_php($image);  $exif    = get_exif_php( $image );  $table   = get_exif_table($image);          // print_array($exif, 'line 505 exif.php', 1);          //print_array($table);  if(isset($exif['DateTimeOriginal'])){    $clock = strtotime($exif['DateTimeOriginal']);    $date  = date("l, F jS Y", $clock);    $time  = date("g:ia", $clock);}elseif(isset($exif['CreateDate'])){  $clock = strtotime($exif['CreateDate']);  $date  = date("l, F jS Y", $clock);  $time  = date("g:ia", $clock);}else if(isset($exif['DateTime'])){  $clock = strtotime($exif['DateTime']);  $date  = date("l, F jS Y", $clock);  $time  = date("g:ia", $clock);}else{  $clock = NULL;}$lens = '';$ext = $exif['FileType'];if(isset($exif['FNumber'])){    $aperture = $exif['FNumber'];}elseif(isset($exif['MaxAperture'])){  $aperture = $exif['MaxAperture'];}else{  $aperture = '';}if(isset($exif['MaxAperture'])){  $max_aperture = 'f/'.$exif['MaxAperture'];}else{  $max_aperture = '';}if(isset($exif['MaxApertureValue'])){  $max_aperture_value = '<br /><span class="mini_text">(Max aperture F/'.$exif['MaxApertureValue'].')</span>';}else{  $max_aperture_value = '';}if(isset($exif['ExposureCompensation']) && $exif['ExposureCompensation'] !== 0){  $exp_compensation = '<br />Compensation: '.$exif['ExposureCompensation'];}else{  $exp_compensation = '';}if(isset($exif['FocalLength'])){  $focal_length = '<br />Shot at '.$exif['FocalLength'];  $focal = $exif['FocalLength'];}else{  $focal_length = '';  $focal = '';}if(isset($exif['ShutterSpeedValue']) && $exif['ShutterSpeedValue'] !== 0){    $shutter = ', '.$exif['ShutterSpeedValue'].' sec';}elseif(isset($exif['ShutterSpeed'])){  $shutter = ', '.$exif['ShutterSpeed'].' sec';}elseif(isset($exif['ExposureTime'])){  $shutter = ', '.$exif['ExposureTime']. ' sec';}else{  $shutter = '';}if(isset($exif['ISO'])){  $iso = ', ISO '.$exif['ISO'];}else{  $iso = '';}if(isset($exif['GPS Altitude'])){  $altitude = $exif['GPS Altitude'];}else{  $altitude = '';}if(isset($exif['TimeZoneOffset'])){  $time_zone_offset = $exif['TimeZoneOffset'];}else{  $time_zone_offset = '';}          //if the lens type is not a range(indicated by the hypen) we don't need to add focal length(shot at:)if(isset($exif['LensType']) && strpos($exif['LensType'], 'Unknown') !== 0 && strlen($exif['LensType'] > 3)){  if(!(strpos($exif['LensType'], "-")===FALSE)){      $lens = $exif['LensType'].' '.$focal_length;  }else{      $lens = $exif['LensType'].' '.$max_aperture;  }}elseif(isset($exif['Lens'])){  if(!(strpos($exif['Lens'], "-")) === FALSE){    $lens .= $exif['Lens'] .$focal_length;}else{  $lens .= $exif['Lens'].' '.$max_aperture;}}else{  $lens = $focal.$max_aperture_value;}          /////$exif['LensID'] I think is more specific than anything else, so if it's set, we'll use itif(isset($exif['LensID'])){  $lens_id = $exif['LensID'];  if(strpos($lens_id, 'Unknown') === FALSE){      if(!(strpos($exif['LensID'], "-")) === FALSE){        $lens = $lens_id.' '.$focal_length;    }else{        $lens = $lens_id;    }}else{  str_replace('Unknown', '', $lens_id);}}if($clock !== NULL){    $shot_time = "<strong>$date</strong>&nbsp;&nbsp;$time";}else{  $shot_time = '';}if(isset($exif['AFAreaMode'])){  $af_area_mode = '<br />'.'AF Area Mode: '.$exif['AFAreaMode'];}else{  $af_area_mode = '';}if(isset($exif['AFPoint'])){    $af_point = ', '.$exif['AFPoint'];}else{  $af_point = '';}if(isset($exif['ContinuousDrive'])){    $focus = $exif['ContinuousDrive'];}else{  $focus = '';}if(isset($exif['FocusMode'])){  $focus_mode = $exif['FocusMode'].' '.$af_point.$af_area_mode;}else{  $focus_mode = '';}if(isset($exif['Caption-Abstract'])){  $caption = $exif['Caption-Abstract'];}else if(isset($exif['ImageDescription'])){  $caption = $exif['ImageDescription'];}else{              $caption = '';/// caption could be caption-abstract, description, imageDescription,          }          if(isset($exif['CreatorAddress'])){              $address = $exif['CreatorAddress'];          }else{              $address = '';          }          if(isset($exif['CreatorCity'])){              $city = $exif['CreatorCity'];          }else{              $city = '';          }          if(isset($exif['CreatorRegion'])){              $region = $exif['CreatorRegion'];          }else{              $region = '';          }          if(isset($exif['CreatorCountry'])){              $country = $exif['CreatorCountry'];          }else{              $country = '';          }          if($address.$city.$region.$country !== ''){              $creator_address = "<br /><span class='mini_text'>Address: ".$address.' '.$city.', '.$region.' '.$country."</span>";          }else{              $creator_address = '';          }          if(isset($exif['Creator']) && !empty($exif['Creator'])){              if(is_array($exif['Creator'])){                  $creator = implode(', ', $exif['Creator']);///if there is more than one creator, implode the array using a comma and a space              }else{                $creator = "<strong>".$exif['Creator']."</strong>";            }        }else{          $creator = null;      }      if(isset($exif['Artist'])){          $artist = "<strong>".$exif['Artist']."</strong>";      }else{          $artist = '';      }      if(strtolower($artist) == 'unknown'){          $artist = '';      }      if($artist !== '' && $artist == $creator && $creator_address !== ''){          $artist = '';      }elseif($artist !== '' && $artist == $creator){          $creator = '';      }      if(isset($exif['Copyright'])){          $copyright = "<strong>".$exif['Copyright']."</strong>";      }elseif(isset($exif['CopyrightNotice'])){          $copyright = "<strong>".$exif['CopyrightNotice']."</strong>";      }elseif(isset($exif['Rights'])){          $copyright = "<strong>".$exif['Rights']."</strong>";      }else{          $copyright = null;      }      if($copyright == $artist || $copyright == $creator){          $copyright = '';      }      if(!(strpos($copyright, "(C)") === FALSE)){          $copyright .= "<span class='warning'><strong>Warning</strong>: <strong>\"(C)\"</strong> is not a valid replacement for an actual \"©\" symbol.  It has no legal standing as a <a href='http://www.copyright.gov/title17/92chap4.html' target='_blank'>copyright notice</a>.  <br />Consider using the word \"Copyright\" instead.</span>";      }elseif(!(strpos($copyright, "(c)") === FALSE)){          $copyright .= "<span class='warning'><strong>Warning</strong>: <strong>\"(c)\"</strong> is not a valid replacement for an actual \"©\" symbol.  It has no legal standing as a <a href='http://www.copyright.gov/title17/92chap4.html' target='_blank'>copyright notice</a>.  <br />Consider using the word \"Copyright\" instead.</span>";      }      if(isset($exif['CreatorWorkURL'])){          $web = $exif['CreatorWorkURL'];          if(strpos($web, 'http://') === false){              $url = "<br /><a href='http://$web' target='_blank'>$web</a>";          }else{              $url = "<br /><a href='$web' >$web</a>";          }      }else{          $url = null;      }      if(isset($exif['CreatorWorkTelephone'])){          $phone = $exif['CreatorWorkTelephone'];      }else{          $phone = null;      }      if(isset($exif['CreatorWorkEmail'])){          $email = '<br /><a href="mailto:'.$exif['CreatorWorkEmail'].'">'.$exif['CreatorWorkEmail'].'</a>';      }else{          $email = '';      }          ///*****This could be wrong.  Trying to set color profile info.  From the looks of it, it's either in DeviceModel (sRGB) or ProfileDescription (sRGB IEC61966-2.1) or in ICCProfileName      if(isset($exif['DeviceModel']) && !empty($exif['DeviceModel'])){          $color_profile = 'Embedded Color Profile: "'.$exif['DeviceModel'].'"';      }elseif(isset($exif['ProfileDescription'])){         $color_profile = 'Embedded Color Profile: "'.$exif['ProfileDescription'].'"';     }else{         $color_profile = '';     }     if(isset($exif['ProfileDescription'])){      if(@$exif['ProfileDescription'] == 'Adobe RGB (1998)'){          $color_profile = "<span class='warning'><strong>Warning: </strong>Embedded color profile: \"<strong>AdobeRGB</strong>\"<br />Some browsers ignore embedded color profiles.  Users of those browsers will see the wrong colors for this image</span>";      }  }  if(isset($exif['DeviceModel'])){      if(@$exif['DeviceModel'] == 'Z009'){          $color_profile = "<span class='warning'><strong>Warning: </strong>Embedded color profile: \"<strong>Z009</strong>\"<br />Some browsers ignore embedded color profiles.  Users of those browsers will see the wrong colors for this image</span>";      }      if(@$exif['DeviceModel'] == 'ROMM'){          $color_profile = "<span class='warning'><strong>Warning: </strong>Embedded color profile: \"<strong>ProPhoto/ROMM</strong>\"<br />Some browsers ignore embedded color profiles.  Users of those browsers will see the wrong colors for this image</span>";      }  }  if(isset($exif['ColorSpace'])){     $color_space = $exif['ColorSpace']; }else{     $color_space = ''; }         ///I think we need to see if colorSpace was declared without a colorProfile being present then issue a warning of sorts? if($color_space !=='' && $color_profile == ''){     $color_profile = "<span class='warning'><strong>Warning:</strong> Color space is tagged as $color_space, without an embedded color profile.  <strong>Windows and Mac browsers will treat the colors randomly.</strong></span>"; }elseif($color_space == '' && $color_profile == ''){     $color_profile = "<span class='warning'><strong>Warning:</strong> No color-space and no embedded color profile.  <strong>Windows and Mac browsers will treat the colors randomly.</strong></span>"; } if($creator.$phone.$url.$email == ''){  $owner = '';}else{  $owner = $creator.' '.$phone.$url.$email;}if(!(strpos($owner, 'unknown') === FALSE)){  $owner = '';}if(isset($exif['UserComment'])){  $user_comment = $exif['UserComment'];  if(!(strpos($user_comment, "(C)") === FALSE)){      $user_comment .= "<span class='warning'><strong>Warning</strong>: <strong>\"(C)\"</strong> is not a valid replacement for an actual \"©\" symbol.  It has no legal standing as a <a href='http://www.copyright.gov/title17/92chap4.html' target='_blank'>copyright notice</a>.  <br />Consider using the word \"Copyright\" instead.</span>";  }elseif(!(strpos($user_comment, "(c)") === FALSE)){      $user_comment .= "<span class='warning'><strong>Warning</strong>: <strong>\"(c)\"</strong> is not a valid replacement for an actual \"©\" symbol.  It has no legal standing as a <a href='http://www.copyright.gov/title17/92chap4.html' target='_blank'>copyright notice</a>.  <br />Consider using the word \"Copyright\" instead.</span>";  }}else{  $user_comment = '';}if(isset($exif['XPComment'])){  $xp_comment = $exif['XPComment'];}else{  $xp_comment = '';}if(isset($exif['RawFileName'])){  $raw_file_name = "<br /><span class='mini_text'>Raw File Name: <strong>".$exif['RawFileName'].'</strong></span>';}else{  $raw_file_name = '';}if(isset($exif['BaseISO'])){    $base_iso = $exif['BaseISO'];}else{  $base_iso = '';}if(isset($exif['ExposureMode'])){    $exposure_mode = $exif['ExposureMode'];}else{  $exposure_mode = '';}if(isset($exif['ExposureProgram'])){    $exposure_prog = $exif['ExposureProgram'];}else{  $exposure_prog = '';}if($exposure_mode == $exposure_prog){  $exposure = $exposure_mode.' exposure';}else{  $exposure = $exposure_mode.' exposure '.$exposure_prog;}$exp = $exposure.', f/'.$aperture.$shutter.$iso.$exp_compensation;if($exposure_mode.$exposure_prog.$aperture.$shutter.$iso == '')  $exp = '';if(isset($exif['Model'])){  $model = $exif['Model'];}else{  $model = '';}if(isset($exif['Make'])){  $make = $exif['Make'];}else{  $make = '';}if($make !== ''){                $make_array = explode(' ', $make);//Fucked up way to do this(Eastman Kodak Company/Kodak z740 Zoom Digital Camera for instance.                    $i=0;                    foreach($make_array as $make){                        if(!(strpos($model, $make) === FALSE)){                            $i++;                        }                    }                    if($i == 0){                        $camera = $make.' '.$model;                    }else{                        $camera = $model;                    }                }else{                  $camera = $model;              }              if(isset($exif['CameraModelName'])){                  $camera = $exif['CameraModelName'];              }              if(isset($exif['Flash'])){                  $flash = $exif['Flash'];              }else{                  $flash = '';              }              if(isset($exif['DOF'])){                  $depth_of_field = $exif['DOF'];              }else{                  $depth_of_field = '';              }              if(isset($exif['Keywords'])){                  if(is_array($exif['Keywords'])){                      $keywords = implode(', ', $exif['Keywords']);                  }else{                      $keywords = $exif['Keywords'];                  }              }else{                  $keywords = '';              }              if(isset($exif['Location'])){                  $location = $exif['Location'];              }else{                  $location = '';              }              if(isset($exif['ImageSize'])){                  $image_size = $exif['ImageSize'];              }else{                  $image_size = '';              }              $position = '';              if(isset($exif['GPSAltitude'])){                  $position .= $exif['GPSAltitude'];              }              if(isset($exif['GPSSpeed'])){                  $position .= '&nbsp;'.$exif['GPSSpeed'];              }              if(isset($exif['GPSSpeedRef'])){                  $position .= $exif['GPSSpeedRef'];              }              if(isset($exif['GPSTrack'])){                  $position .= '&nbsp; heading '.$exif['GPSTrack'].'&deg;';              }              if(isset($exif['ObjectName'])){                  $title = $exif['ObjectName'];              }else{                  $title = '';              }              if(isset($exif['URL'])){                  if(!(strpos($exif['URL'], "http://") === FALSE)){                    $artist_url = '<a href="'.$exif['URL'].'" target="_blank">'.$exif['URL'].'</a>';                }else{                    $artist_url = '<a href="http://'.$exif['URL'].'" target="_blank">'.$exif['URL'].'</a>';                }            }else{              $artist_url = '';          }          if(isset($exif['UsageTerms'])){              $usage_terms = $exif['UsageTerms'];          }else{              $usage_terms = '';          }          if(isset($exif['Headline'])){              $headline = "<strong>".$exif['Headline']."</strong>";          }else{              $headline = '';          }          $table = array(              'Headline'              => $headline,              'Title'                 => $title,              'Artist'                => $artist,              //'Photographer'        => $owner.$creator_address,              'Creator'               => $owner.$creator_address,              'Caption'               => $caption,              'Camera'                => $camera,              'Lens'                  => $lens,              'Exposure'              => $exp,              'Focus'                 => $focus_mode,              'Flash'                 => $flash,              'Depth of Field'        => $depth_of_field,              'Copyright'             => $copyright,              'URL'                   => $artist_url,              'Location'              => $location,              'Usage Terms'           => $usage_terms,              'Keywords'              => $keywords,              'User Comment'          => $user_comment,              'XP Comment'            => $xp_comment,              'Date'                  => $shot_time,              'Position'              => $position,              'Time Zone<br />Offset' => $time_zone_offset,              'File Info'             => $image_size.' '.$ext.' ['.$size.']'.$raw_file_name,              'Color Encoding'        => $color_profile,              'Image URL'             => $this->web_image,              );$this->load->library('table');$data = array();foreach($table as $key=>$value){              //if(trim($value) !== '' && $camera !== ''){  if(trim($value) !== ''){      array_push($data, array($key, $value));  }}$tmpl = array(    'table_open' => '<table class="exif">',    );$this->table->set_template($tmpl);$this->table->set_heading(array(null, null));if(!empty($data)){  return $this->table->generate($data);}}}